name: ros2-cli
version: '0.32.1'
summary: Command line interface tools for ROS2
description: |
  Snap for ROS 2 command line interface tools [1] included with a standard install of any ROS 2 distro.

  Note: This is a beta release, if you encounter any bugs or limitations, please do report it [2].

  The Snap does not support roslaunch, rospkg, rosrun and custom ROS messages as these require access to the host filesystem.
  The ros2-cheat-sheet [3] provides examples for commands and their verbs.

  Installation Instructions:

  * Install ros2cli from a terminal,
  `snap install ros2-cli --channel=jazzy/beta`

  * Test your installation,
  `ros2-cli.ros2 --help`

  [1] https://github.com/ros2/ros2cli
  [2] https://github.com/canonical/ros2cli-snap/issues
  [3] https://github.com/ubuntu-robotics/ros2_cheats_sheet/blob/master/cli/cli_cheats_sheet.pdf

website: https://github.com/canonical/ros2cli-snap
source-code: https://github.com/canonical/ros2cli-snap
issues: https://github.com/canonical/ros2cli-snap/issues
contact: ubuntu-robotics-community@canonical.com
license: Apache-2.0

grade: stable
confinement: strict
base: core24

apps:
  ros2:
    command: opt/ros/snap/bin/ros2
    completer: usr/share/bash-completion/completions/ros2cli-completion
    plugs: [home, network, network-bind]
    environment:
      # Add blas and lapack to library path, needed for numpy dependency
      "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/blas:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/lapack"
      # Disable FastDDS shared-memory
      FASTRTPS_DEFAULT_PROFILES_FILE: "${SNAP}/usr/share/fastdds_no_shared_memory.xml"
    extensions: [ros2-jazzy-ros-base]

parts:
  fastdds-no-shared-memory:
    plugin: dump
    source: snap/local/
    organize:
      'fastdds_no_shared_memory.xml': usr/share/
      'ros2cli-completion': usr/share/bash-completion/completions/

  ros2cli:
    plugin: colcon
    source: https://github.com/ros2/ros2cli.git
    source-tag: 0.32.1
    colcon-packages-ignore:
      - ros2pkg
      - ros2run
      - ros2launch
    build-packages:
      - ros-jazzy-rosidl-adapter
    stage-packages:
      - python3-argcomplete

    # Using 'stage-packages' would download said packages and their deps
    # before they could be filter out wrt the underlay content-sharing snap.
    # Instead we create a fake package which package.xml lists all
    # packages we would like to stage. This will be handle during the build
    # and thus can be filtered for packages provided by content-sharing.
    # We shove that in the same part as the cli because the cli and the messages
    # both have some files in common which leads to a conflict when priming.
    override-build: |
      if [ ! -d "${CRAFT_PART_SRC_WORK}/ros2cli_msgs" ]; then
        mkdir "${CRAFT_PART_SRC_WORK}/ros2cli_msgs"
      fi
      if [ ! -f "${CRAFT_PART_SRC_WORK}/ros2cli_msgs/CMakeLists.txt" ]; then
        cp "${CRAFT_PROJECT_DIR}/snap/local/CMakeLists.txt" "${CRAFT_PART_SRC_WORK}/ros2cli_msgs/."
      fi
      if [ ! -f "${CRAFT_PART_SRC_WORK}/ros2cli_msgs/package.xml" ]; then
        cp "${CRAFT_PROJECT_DIR}/snap/local/package.xml" "${CRAFT_PART_SRC_WORK}/ros2cli_msgs/."
      fi

      craftctl default
